// Generated by CoffeeScript 2.3.2
(function() {
  // # Persist

  // Persist Ambari Cluster resource using the [REST API v2](https://github.com/apache/ambari/blob/trunk/ambari-server/docs/api/v1)

  // * `password` (string)
  //   Ambari Administrator password.
  // * `url` (string)   
  //   Ambari External URL.
  // * `username` (string)
  //   Ambari Administrator username.
  // * `name` (string)   
  //   Name of the cluster.

  // ## Exemple

  // ```js
  // .cluster.persist({
  //   "username": 'ambari_admin',
  //   "password": 'ambari_secret',
  //   "url": "http://ambari.server.com",
  //   "cluster_name": 'my_cluster'
  //   }
  // }, function(err, status){
  //   console.log( err ? err.message : "Node Added To Cluster: " + status)
  // })
  // ```

  // ## Source Code
  var utils;

  module.exports = function(options, callback) {
    var do_end, err, error, hostname, opts, path, port, status;
    if (typeof options.options === 'object') {
      options = options.options;
    }
    error = null;
    status = false;
    if (options.debug == null) {
      options.debug = false;
    }
    do_end = function() {
      if (callback != null) {
        return callback(error, status);
      }
      return new Promise(function(fullfil, reject) {
        if (error != null) {
          reject(error);
        }
        return fullfil(response);
      });
    };
    try {
      if (!options.username) {
        throw Error('Required Options: username');
      }
      if (!options.password) {
        throw Error('Required Options: password');
      }
      if (!options.url) {
        throw Error('Required Options: url');
      }
      [hostname, port] = options.url.split("://")[1].split(':');
      if (options.sslEnabled == null) {
        options.sslEnabled = options.url.split('://')[0] === 'https';
      }
      path = "/api/v1/persist";
      opts = {
        hostname: hostname,
        port: port,
        rejectUnauthorized: false,
        headers: utils.headers(options),
        sslEnabled: options.sslEnabled,
        content: "{ \"CLUSTER_CURRENT_STATUS\": \"{\\\"clusterState\\\":\\\"CLUSTER_STARTED_5\\\"}\" }"
      };
      opts['method'] = 'POST';
      opts.json = false;
      opts.path = `${path}`;
      return utils.doRequestWithOptions(opts, function(err, statusCode, response) {
        var response_object;
        if (err) {
          throw err;
        }
        if (statusCode !== 202) {
          response_object = JSON.parse(response);
          error = Error(`Error: ${response_object.message}`);
          throw error;
        } else {
          status = true;
          return do_end();
        }
      });
    } catch (error1) {
      err = error1;
      error = err;
      return do_end();
    }
  };

  // ## Depencendies
  utils = require('../utils');

}).call(this);

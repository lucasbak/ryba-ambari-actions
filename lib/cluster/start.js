// Generated by CoffeeScript 2.3.2
(function() {
  // # Ambari Cluster Deploy

  // Start all services of a cluster using the [REST API v2](https://github.com/apache/ambari/blob/trunk/ambari-server/docs/api/v1)

  // * `password` (string)
  //   Ambari Administrator password.
  // * `url` (string)   
  //   Ambari External URL.
  // * `username` (string)
  //   Ambari Administrator username.
  // * `name` (string)   
  //   Name of the cluster.

  // ## Exemple

  // ```js
  // nikita
  // .cluster.update({
  //   "username": 'ambari_admin',
  //   "password": 'ambari_secret',
  //   "url": "http://ambari.server.com",
  //   "name": 'my_cluster',
  //   "data": {"provisioning_state":"INSTALLED"}
  //   }
  // }, function(err, status){
  //   console.log( err ? err.message : "Cluster Updated: " + status)
  // })
  // ```

  // ## Source Code
  var utils;

  module.exports = function(options, callback) {
    var do_end, err, error, hostname, interval, opts, path, port, status;
    if (typeof options.options === 'object') {
      options = options.options;
    }
    error = null;
    if (options.wait == null) {
      options.wait = true;
    }
    status = false;
    if (options.debug == null) {
      options.debug = false;
    }
    interval = null;
    do_end = function() {
      if (interval != null) {
        clearInterval(interval);
      }
      if (callback != null) {
        return callback(error, status);
      }
      return new Promise(function(fullfil, reject) {
        if (error != null) {
          reject(error);
        }
        return fullfil(response);
      });
    };
    try {
      if (!options.username) {
        throw Error('Required Options: username');
      }
      if (!options.password) {
        throw Error('Required Options: password');
      }
      if (!options.url) {
        throw Error('Required Options: url');
      }
      if (!options.name) {
        throw Error('Required Options: name');
      }
      if (options.cluster_name != null) {
        options.name = options.cluster_name;
      }
      [hostname, port] = options.url.split("://")[1].split(':');
      if (options.sslEnabled == null) {
        options.sslEnabled = options.url.split('://')[0] === 'https';
      }
      path = "/api/v1/clusters";
      opts = {
        hostname: hostname,
        port: port,
        rejectUnauthorized: false,
        headers: utils.headers(options),
        sslEnabled: options.sslEnabled
      };
      opts['method'] = 'GET';
      opts.path = `${path}/${options.name}/services`;
      return utils.doRequestWithOptions(opts, function(err, statusCode, response) {
        if (err) {
          throw err;
        }
        response = JSON.parse(response);
        if ((response != null ? response.status : void 0) === 404) {
          if (options.debug) {
            console.log(`cluster ${options.name} not found in ambari server cluster.deploy`);
          }
          throw Error(`Cluster ${options.name} does not exist in ambari-server`);
        } else {
          opts['method'] = 'PUT';
          if (opts.content == null) {
            opts.content = JSON.stringify({
              RequestInfo: {
                context: 'Starting Services API',
                operation_level: {
                  level: 'CLUSTER',
                  cluster_name: options.name
                }
              },
              Body: {
                ServiceInfo: {
                  state: 'STARTED'
                }
              }
            });
          }
          return utils.doRequestWithOptions(opts, function(err, statusCode, response) {
            var do_wait, request_id;
            request_id = null;
            do_wait = function() {
              opts.path = `/api/v1/clusters/${options.name}/requests/${request_id}`;
              opts.method = 'GET';
              if (typeof this.log === "function") {
                this.log({
                  message: `Wait Request id ${request_id}`,
                  level: 'INFO',
                  module: 'ryba-ambari-actions/cluster/start'
                });
              }
              return utils.doRequestWithOptions(opts, function(err, statusCode, response) {
                try {
                  if (err) {
                    throw err;
                  }
                  response = JSON.parse(response);
                  if (statusCode !== 200) {
                    throw Error(response.message);
                  }
                  if (response['Requests']['request_status'] === 'FAILED') {
                    throw Error("Start Failed");
                  }
                  if (response['Requests']['request_status'] === 'COMPLETED') {
                    status = true;
                    return do_end();
                  }
                } catch (error1) {
                  err = error1;
                  error = err;
                  return do_end();
                }
              });
            };
            try {
              if (err) {
                throw err;
              }
              if (parseInt(statusCode) !== 202) {
                throw Error(response.message);
              }
              response = JSON.parse(response);
              request_id = response['Requests']['id'];
              if (typeof this.log === "function") {
                this.log({
                  message: `Deploy Cluster Service ${options.component_name} Accepted with Request id ${request_id}`,
                  level: 'INFO',
                  module: 'ryba-ambari-actions/cluster/start'
                });
              }
              if (statusCode !== 202) {
                throw Error(response.message);
              }
              status = true;
              if (options.wait) {
                return interval = setInterval(do_wait, 2000);
              } else {
                return do_end();
              }
            } catch (error1) {
              err = error1;
              error = err;
              return do_end();
            }
          });
        }
      });
    } catch (error1) {
      err = error1;
      error = err;
      return do_end();
    }
  };

  // ## Depencendies
  utils = require('../utils');

}).call(this);

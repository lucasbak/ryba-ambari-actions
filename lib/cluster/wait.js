// Generated by CoffeeScript 2.3.2
(function() {
  // # Ambari Cluster Add

  // Create a cluster using the [REST API v2](https://github.com/apache/ambari/blob/trunk/ambari-server/docs/api/v1)

  // * `password` (string)
  //   Ambari Administrator password.
  // * `url` (string)   
  //   Ambari External URL.
  // * `username` (string)
  //   Ambari Administrator username.
  // * `name` (string)   
  //   Name of the cluster.
  // * `version` (string)   
  //   Version of the cluster, required.
  // * `security_type` (string)   
  //   NONE or KERBEROS. default to NONE.

  // ## Exemple

  // ```js
  // nikita
  // .cluster.add({
  //   "username": 'ambari_admin',
  //   "password": 'ambari_secret',
  //   "url": "http://ambari.server.com",
  //   "name": 'my_cluster'
  //   "version": 'HDP-2.5.3'
  //   }
  // }, function(err, status){
  //   console.log( err ? err.message : "Policy Created: " + status)
  // })
  // ```

  // ## Source Code
  var utils;

  module.exports = function(options, callback) {
    var do_end, do_request, err, error, hostname, interval, opts, path, port, status, waited;
    if (typeof options.options === 'object') {
      options = options.options;
    }
    error = null;
    status = false;
    if (options.debug == null) {
      options.debug = false;
    }
    if (options.security_type == null) {
      options.security_type = 'NONE';
    }
    interval = null;
    if (options.timeout == null) {
      options.timeout = 10 * 60 * 60 * 1000;
    }
    do_end = function() {
      if (interval != null) {
        clearInterval(interval);
      }
      if (error == null) {
        status = true;
      }
      if (callback != null) {
        return callback(error, status);
      }
      return new Promise(function(fullfil, reject) {
        if (error != null) {
          reject(error);
        }
        return fullfil(response);
      });
    };
    try {
      if (!options.username) {
        throw Error('Required Options: username');
      }
      if (!options.password) {
        throw Error('Required Options: password');
      }
      if (!options.url) {
        throw Error('Required Options: url');
      }
      if (!options.name) {
        throw Error('Required Options: name');
      }
      [hostname, port] = options.url.split("://")[1].split(':');
      if (options.sslEnabled == null) {
        options.sslEnabled = options.url.split('://')[0] === 'https';
      }
      path = "/api/v1/clusters";
      opts = {
        hostname: hostname,
        port: port,
        rejectUnauthorized: false,
        headers: utils.headers(options),
        sslEnabled: options.sslEnabled
      };
      opts['method'] = 'GET';
      opts.path = `${path}/${options.name}`;
      waited = 0;
      do_request = function() {
        return utils.doRequestWithOptions(opts, function(err, statusCode, response) {
          var ref;
          try {
            if (err) {
              throw err;
            }
            waited = waited + 1000;
            response = JSON.parse(response);
            if (parseInt(statusCode) === 200) {
              if (typeof this.log === "function") {
                this.log({
                  message: `Ok: Cluster available  name:${options.name}`,
                  level: 'INFO',
                  module: 'ryba-ambari-actions/cluster/wait'
                });
              }
            }
            if (parseInt(statusCode) === 200) {
              if (typeof this.log === "function") {
                this.log({
                  message: "Clearing Interval",
                  level: 'INFO',
                  module: 'ryba-ambari-actions/cluster/wait'
                });
              }
            }
            if ((interval != null) && ((parseInt(statusCode) === 200) || (waited > options.timeout))) {
              clearInterval(interval);
            }
            if (parseInt(statusCode) === 200) {
              return do_end();
            }
            if (waited > options.timeout) {
              return do_end();
            }
            if (typeof this.log === "function") {
              this.log({
                message: `Cluster Not Available name:${options.name}`,
                level: 'INFO',
                module: 'ryba-ambari-actions/cluster/wait'
              });
            }
            if ((ref = parseInt(statusCode)) !== 200 && ref !== 404) {
              throw Error(response.message);
            }
          } catch (error1) {
            err = error1;
            return error = err;
          }
        });
      };
      if (typeof this.log === "function") {
        this.log({
          message: "Set Wait Interval 1000ms",
          level: 'INFO',
          module: 'ryba-ambari-actions/cluster/wait'
        });
      }
      return interval = setInterval(do_request, 1000);
    } catch (error1) {
      err = error1;
      error = err;
      return do_end();
    }
  };

  // ## Depencendies
  utils = require('../utils');

}).call(this);

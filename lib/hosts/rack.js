// Generated by CoffeeScript 2.3.2
(function() {
  // # Ambari Hosts Add

  // Create host using the [REST API v2](https://github.com/apache/ambari/blob/trunk/ambari-server/docs/api/v1)
  // if host 

  // * `password` (string)
  //   Ambari Administrator password.
  // * `url` (string)   
  //   Ambari External URL.
  // * `username` (string)
  //   Ambari Administrator username.
  // * `cluster_name` (string)   
  //   Name of the cluster
  // * `hostname` (string)   
  //   Hostname of the server to add, required.
  // * `rack_info` (string|Int)   
  //   The rack the host belongs to, required.

  // ## Exemple

  // ```js
  // nikita
  // .hosts.rack({
  //   "username": 'ambari_admin',
  //   "password": 'ambari_secret',
  //   "url": "http://ambari.server.com",
  //   "hostname": 'master1.server.com'
  //   "rack_info": 1
  //   }
  // }, function(err, status){
  //   console.log( err ? err.message : "Rack Updated: " + status)
  // })
  // ```

  // ## Source Code
  var utils;

  module.exports = function(options, callback) {
    var do_end, err, error, hostname, opts, path, port, status;
    if (typeof options.options === 'object') {
      options = options.options;
    }
    error = null;
    status = false;
    if (options.debug == null) {
      options.debug = false;
    }
    do_end = function() {
      if (callback != null) {
        return callback(error, status);
      }
      return new Promise(function(fullfil, reject) {
        if (error != null) {
          reject(error);
        }
        return fullfil(status);
      });
    };
    try {
      if (!options.username) {
        throw Error('Required Options: username');
      }
      if (!options.password) {
        throw Error('Required Options: password');
      }
      if (!options.url) {
        throw Error('Required Options: url');
      }
      if (!options.hostname) {
        throw Error('Required Options: hostname');
      }
      if (!options.rack_info) {
        throw Error('Required Options: rack_info');
      }
      if (!options.cluster_name) {
        throw Error('Required Options: cluster_name');
      }
      [hostname, port] = options.url.split("://")[1].split(':');
      if (options.sslEnabled == null) {
        options.sslEnabled = options.url.split('://')[0] === 'https';
      }
      path = `/api/v1/clusters/${options.cluster_name}/hosts`;
      opts = {
        hostname: hostname,
        port: port,
        rejectUnauthorized: false,
        headers: utils.headers(options),
        sslEnabled: options.sslEnabled
      };
      opts['method'] = 'GET';
      opts.path = `${path}/${options.hostname}`;
      return utils.doRequestWithOptions(opts, function(err, statusCode, response) {
        try {
          if (err) {
            throw err;
          }
          response = JSON.parse(response);
          if ((response != null ? response.status : void 0) === 404) {
            throw Error(` ${options.hostname} does not exit in ambari database `);
          }
          if (response['Hosts']['rack_info'] === options.rack_info) {
            return do_end();
          }
          opts['method'] = 'PUT';
          if (opts.content == null) {
            opts.content = JSON.stringify({
              "Hosts": {
                "rack_info": `${options.rack_info}`
              }
            });
          }
          return utils.doRequestWithOptions(opts, function(err, statusCode, response) {
            try {
              if (err) {
                throw err;
              }
              if (statusCode !== 200) {
                response = JSON.parse(response);
                throw Error(response.message);
              } else {
                status = true;
                return do_end();
              }
            } catch (error1) {
              err = error1;
              error = err;
              return do_end();
            }
          });
        } catch (error1) {
          err = error1;
          error = err;
          return do_end();
        }
      });
    } catch (error1) {
      err = error1;
      error = err;
      return do_end();
    }
  };

  // ## Depencendies
  utils = require('../utils');

}).call(this);

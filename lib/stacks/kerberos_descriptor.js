// Generated by CoffeeScript 2.3.2
(function() {
  // # Ambari Configs update

  // Get ambari kerberos descriptor configuration [REST API v2](https://github.com/apache/ambari/blob/trunk/ambari-server/docs/api/v1)

  // * `password` (string)
  //   Ambari Administrator password.
  // * `url` (string)   
  //   Ambari External URL.
  // * `username` (string)
  //   Ambari Administrator username.
  // * `stack_name` (string)
  //   Thw stack name.
  // * `stack_version` (string)   
  //   The stack version of the configuration request.
  // * `cluster_name` (string)   
  //   The cluster name if source is set to 'COMPOSITE'   
  // * `source` (string)   
  //   can be `STACK` or `COMPOSITE`. STACK by default.

  // ## Exemple

  // ```js
  // stacks.kerberos_descriptor({
  //   "username": 'ambari_admin',
  //   "password": 'ambari_secret',
  //   "url": "http://ambari.server.com",
  //   "stack_name": "HDP",
  //   "stack_version": "2.6"
  //   }
  // }, function(err, status, properties){
  //   console.log( err ? err.message : "Properties are: " + properties)
  // })
  // ```

  // ## Source Code
  var utils;

  module.exports = function(options, callback) {
    var differences, do_end, err, error, hostname, opts, path, port, ref, return_response, status;
    error = null;
    differences = false;
    if (options.debug == null) {
      options.debug = false;
    }
    if (options.source == null) {
      options.source = 'STACK';
    }
    return_response = null;
    status = false;
    if (options.discover == null) {
      options.discover = true;
    }
    do_end = function() {
      if (callback != null) {
        return callback(error, status, return_response);
      }
      return new Promise(function(fullfil, reject) {
        if (error != null) {
          reject(error);
        }
        return fullfil(differences);
      });
    };
    try {
      if (!options.username) {
        throw Error('Required Options: username');
      }
      if (!options.password) {
        throw Error('Required Options: password');
      }
      if (!options.url) {
        throw Error('Required Options: url');
      }
      if ((!options.stack_name) && options.source === 'STACK') {
        throw Error('Required Options: stack_name');
      }
      if ((!options.stack_version) && options.source === 'STACK') {
        throw Error('Required Options: stack_version');
      }
      if ((!options.cluster_name) && options.source === 'COMPOSITE') {
        throw Error('Required Options: cluster_name');
      }
      if (options.stack_name) {
        if ((ref = options.stack_name) !== 'HDP' && ref !== 'HDF') {
          throw Error(`Unsupported Stack Name ${options.stack_name}`);
        }
      }
      [hostname, port] = options.url.split("://")[1].split(':');
      if (options.sslEnabled == null) {
        options.sslEnabled = options.url.split('://')[0] === 'https';
      }
      path = options.source === 'STACK' ? `/api/v1/stacks/${options.stack_name}/versions/${options.stack_version}/artifacts/kerberos_descriptor` : `/api/v1/clusters/${options.cluster_name}/kerberos_descriptors/COMPOSITE`;
      opts = {
        hostname: hostname,
        port: port,
        rejectUnauthorized: false,
        headers: utils.headers(options),
        sslEnabled: options.sslEnabled
      };
      opts['method'] = 'GET';
      opts.path = path;
      return utils.doRequestWithOptions(opts, function(err, statusCode, response) {
        try {
          if (err) {
            throw err;
          }
          response = JSON.parse(response);
          if (statusCode !== 200) {
            throw Error(response.message);
          }
          return_response = options.source === 'STACK' ? {
            artifact_data: response.artifact_data
          } : {
            kerberos_descriptor: response['KerberosDescriptor'].kerberos_descriptor
          };
          status = true;
          return do_end();
        } catch (error1) {
          err = error1;
          error = err;
          return do_end();
        }
      });
    } catch (error1) {
      err = error1;
      error = err;
      return do_end();
    }
  };

  // ## Depencendies
  utils = require('../utils');

}).call(this);

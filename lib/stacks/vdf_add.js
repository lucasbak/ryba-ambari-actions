// Generated by CoffeeScript 2.3.2
(function() {
  // # Ambari Cluster Version Definition File Add

  // Add a Version Definition File using the [REST API v2](https://github.com/apache/ambari/blob/trunk/ambari-server/docs/api/v1)
  // VDFs have been added starting with Ambari 2.6.0.

  // * `password` (string)
  //   Ambari Administrator password.
  // * `url` (string)   
  //   Ambari External URL.
  // * `username` (string)
  //   Ambari Administrator username.
  // * `name` (string)   
  //   Name of the cluster.
  // * `source` (String)   
  // The source url to read the VDF from. Ambari Server needs to be able to reach the url.

  // ## Exemple

  // ```js
  // nikita
  // .stacks.vdf_add({
  //   "username": 'ambari_admin',
  //   "password": 'ambari_secret',
  //   "url": "http://ambari.server.com",
  //   "name": 'my_cluster',
  //   "source": "http://public-repo-1.hortonworks.com/HDP/centos7/3.x/updates/3.0.1.0/HDP-3.0.1.0-187.xml"
  //   }
  // }, function(err, status){
  //   console.log( err ? err.message : "VDF Posted: " + status)
  // })
  // ```

  // ## Source Code
  var url, utils;

  module.exports = function(options, callback) {
    var do_end, do_put, error, hostname, opts, path, port, status;
    if (typeof options.options === 'object') {
      options = options.options;
    }
    error = null;
    status = false;
    if (options.debug == null) {
      options.debug = false;
    }
    do_end = function() {
      if (callback != null) {
        return callback(error, status);
      }
      return new Promise(function(fullfil, reject) {
        if (error != null) {
          reject(error);
        }
        return fullfil(response);
      });
    };
    try {
      if (!options.username) {
        throw Error('Required Options: username');
      }
      if (!options.password) {
        throw Error('Required Options: password');
      }
      if (!options.url) {
        throw Error('Required Options: url');
      }
      if (!options.name) {
        throw Error('Required Options: name');
      }
      if (!options.source) {
        throw Error('Required Options: source');
      }
      [hostname, port] = options.url.split("://")[1].split(':');
      if (options.sslEnabled == null) {
        options.sslEnabled = options.url.split('://')[0] === 'https';
      }
      path = "/api/v1/version_definitions";
      opts = {
        hostname: hostname,
        port: port,
        rejectUnauthorized: false,
        headers: utils.headers(options),
        sslEnabled: options.sslEnabled
      };
      do_put = function(callback) {
        var err;
        try {
          opts.content = JSON.stringify({
            'VersionDefinition': {
              'version_url': `${options.source}`
            }
          });
          opts.method = 'POST';
          opts.path = path;
          return utils.doRequestWithOptions(opts, function(err, statusCode, response) {
            if (err) {
              throw err;
            }
            response = JSON.parse(response);
            if (parseInt(statusCode) === 500) {
              if (!options.skip) {
                throw Error(response.message);
              }
              status = false;
              return do_end();
            } else {
              status = true;
              return do_end();
            }
          });
        } catch (error1) {
          err = error1;
          error = err;
          return do_end();
        }
      };
      return do_put();
    } catch (error1) {}
  };

  // do_read_source_vdf = ->
  //   vdf_url = url.parse options.source
  //   if not vdf_url.protocol?
  //     vdf_url = url.parse "http://#{options.source}"
  //   read_opts =
  //     path: vdf_url.path
  //     hostname: vdf_url.host
  //     port: vdf_url.port
  //     sslEnabled: vdf_url.protocol isnt 'http:'
  //     rejectUnauthorized: false
  //   utils.doRequestWithOptions read_opts, (err, statusCode, response) ->
  //     [stack_id] = /<stack-id>.*<\/stack-id>/.exec response
  //     [version] = /<version>.*<\/version>/.exec response
  //     if stack_id? and version?
  //       console.log stack_id, version
  //       do_put()
  //     else
  //       do_put()
  // do_read_source_vdf()

  // ## Depencendies
  utils = require('../utils');

  url = require('url');

}).call(this);
